/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Workshop as PrismaWorkshop,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class WorkshopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkshopCountArgs, "select">): Promise<number> {
    return this.prisma.workshop.count(args);
  }

  async workshops<T extends Prisma.WorkshopFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkshopFindManyArgs>
  ): Promise<PrismaWorkshop[]> {
    return this.prisma.workshop.findMany<Prisma.WorkshopFindManyArgs>(args);
  }
  async workshop<T extends Prisma.WorkshopFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkshopFindUniqueArgs>
  ): Promise<PrismaWorkshop | null> {
    return this.prisma.workshop.findUnique(args);
  }
  async createWorkshop<T extends Prisma.WorkshopCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkshopCreateArgs>
  ): Promise<PrismaWorkshop> {
    return this.prisma.workshop.create<T>(args);
  }
  async updateWorkshop<T extends Prisma.WorkshopUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkshopUpdateArgs>
  ): Promise<PrismaWorkshop> {
    return this.prisma.workshop.update<T>(args);
  }
  async deleteWorkshop<T extends Prisma.WorkshopDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkshopDeleteArgs>
  ): Promise<PrismaWorkshop> {
    return this.prisma.workshop.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.workshop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }
}
