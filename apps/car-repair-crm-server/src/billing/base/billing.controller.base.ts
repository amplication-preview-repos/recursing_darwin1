/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BillingService } from "../billing.service";
import { BillingCreateInput } from "./BillingCreateInput";
import { Billing } from "./Billing";
import { BillingFindManyArgs } from "./BillingFindManyArgs";
import { BillingWhereUniqueInput } from "./BillingWhereUniqueInput";
import { BillingUpdateInput } from "./BillingUpdateInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";

export class BillingControllerBase {
  constructor(protected readonly service: BillingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Billing })
  async createBilling(
    @common.Body() data: BillingCreateInput
  ): Promise<Billing> {
    return await this.service.createBilling({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,
      },
      select: {
        amount: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Billing] })
  @ApiNestedQuery(BillingFindManyArgs)
  async billings(@common.Req() request: Request): Promise<Billing[]> {
    const args = plainToClass(BillingFindManyArgs, request.query);
    return this.service.billings({
      ...args,
      select: {
        amount: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Billing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async billing(
    @common.Param() params: BillingWhereUniqueInput
  ): Promise<Billing | null> {
    const result = await this.service.billing({
      where: params,
      select: {
        amount: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Billing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBilling(
    @common.Param() params: BillingWhereUniqueInput,
    @common.Body() data: BillingUpdateInput
  ): Promise<Billing | null> {
    try {
      return await this.service.updateBilling({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,
        },
        select: {
          amount: true,

          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Billing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBilling(
    @common.Param() params: BillingWhereUniqueInput
  ): Promise<Billing | null> {
    try {
      return await this.service.deleteBilling({
        where: params,
        select: {
          amount: true,

          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: BillingWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,

        billing: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        paid: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  async connectInvoices(
    @common.Param() params: BillingWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateBilling({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  async updateInvoices(
    @common.Param() params: BillingWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateBilling({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  async disconnectInvoices(
    @common.Param() params: BillingWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateBilling({
      where: params,
      data,
      select: { id: true },
    });
  }
}
